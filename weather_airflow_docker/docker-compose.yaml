version: '3.8'

x-airflow-common:
  &airflow-common
  image: apache/airflow:3.0.6
  networks:
    - airflow-network
  environment: &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://postgres:bens@postgres_weather/weather_app
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__API__SECRET_KEY: 'airflow'
    AIRFLOW__AUTH__BACKEND: 'airflow.auth.backends.basic_auth'
    AIRFLOW__WEBSERVER__AUTHENTICATE: 'false'
    _AIRFLOW_DB_MIGRATE: 'true'
    _AIRFLOW_WWW_USER_CREATE: 'true'
    _AIRFLOW_WWW_USER_USERNAME: 'admin'
    _AIRFLOW_WWW_USER_PASSWORD: 'admin'
    PYTHONPATH: "/opt/airflow/dags:/opt/airflow/weather_data_pipeline"
    _PIP_ADDITIONAL_REQUIREMENTS: "pandas psycopg2-binary python-dotenv requests"
  volumes:
    - ./dags:/opt/airflow/dags
    - ./logs:/opt/airflow/logs
    - ./plugins:/opt/airflow/plugins
    - ../weather_data_pipeline:/opt/airflow/weather_data_pipeline
    - ../.env:/opt/airflow/.env
    - ../../weather_data_pipeline:/opt/airflow/weather_data_pipeline 
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    postgres_weather:
      condition: service_healthy

services:
  postgres_weather:
    image: postgres:15
    networks:
      - airflow-network
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: bens
      POSTGRES_DB: weather_app
    ports:
      - "${POSTGRES_PORT:-5433}:5432"
    volumes:
      - postgres_weather_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "postgres"]
      interval: 5s
      retries: 5
    restart: always

  airflow-weather:
    <<: *airflow-common
    command: standalone
    ports:
      - "${AIRFLOW_PORT:-8081}:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: always

networks:
  airflow-network:
    driver: bridge

volumes:
  postgres_weather_data: